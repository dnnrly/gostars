package actions

import (
	"github.com/dnnrly/gostars/models"
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Star)
// DB Table: Plural (stars)
// Resource: Plural (Stars)
// Path: Plural (/stars)
// View Template Folder: Plural (/templates/stars/)

// StarsResource is the resource for the Star model
type StarsResource struct {
	buffalo.Resource
}

// List gets all Stars. This function is mapped to the path
// GET /stars
func StarsList(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Game
	game := &models.Game{}

	// To find the Game the parameter game_id is used.
	if err := tx.Find(game, c.Param("game_id")); err != nil {
		return c.Error(404, err)
	}

	stars := &models.Stars{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.BelongsTo(game).PaginateFromParams(c.Params())

	// Retrieve all Stars from the DB
	if err := q.All(stars); err != nil {
		return errors.WithStack(err)
	}

	// Make Stars available inside the html template
	c.Set("game", game)
	c.Set("stars", stars)

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.HTML("stars/index.html"))
}

// Show gets the data for one Star. This function is mapped to
// the path GET /stars/{star_id}
func StarsShow(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Game
	game := &models.Game{}

	// To find the Game the parameter game_id is used.
	if err := tx.Find(game, c.Param("game_id")); err != nil {
		return c.Error(404, err)
	}

	// Allocate an empty Star
	star := &models.Star{}

	// To find the Star the parameter star_id is used.
	if err := tx.BelongsTo(game).Find(star, c.Param("star_id")); err != nil {
		return c.Error(404, err)
	}

	// Make star available inside the html template
	c.Set("game", game)
	c.Set("star", star)

	return c.Render(200, r.HTML("stars/show.html"))
}
